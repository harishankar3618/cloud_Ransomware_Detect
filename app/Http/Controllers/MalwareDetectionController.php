<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;
use Illuminate\Support\Facades\Log;

class MalwareDetectionController extends Controller
{
    public function welcome()
    {
        return view('welcome');
    }

    public function detectMalware(Request $request)
    {
        $request->validate([
            'uploads' => 'required',
            'uploads.*' => 'file|max:102400', // max 100MB
            'receipt_email' => 'required|email'
        ]);

        $uploadedFiles = $request->file('uploads');
        $receiptEmail = $request->input('receipt_email');
        $uploadType = $request->input('fileOrFolder', 'file');

        $pythonCmd = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN'
            ? 'C:\Users\hari shankar\Documents\websites\cloud_Ransomware_Detect\venv\Scripts\python.exe'
            : 'python3';

        $pythonScriptPath = base_path('Project/scan_file.py');
        $emailScriptPath = base_path('Project/email_alert.py');
        $results = [];

        try {
            if ($uploadType === 'folder') {
                $tempDir = sys_get_temp_dir() . '/uploads_folder_' . time();
                mkdir($tempDir, 0755, true);

                foreach ($uploadedFiles as $file) {
                    $file->move($tempDir, $file->getClientOriginalName());
                }

                $process = new Process([$pythonCmd, $pythonScriptPath, 'folder', $tempDir]);
                $process->setTimeout(300);
                $process->run();

                if (!$process->isSuccessful()) {
                    Log::error('Python script failed: ' . $process->getErrorOutput());
                    $results[] = [
                        'file' => 'Folder: uploads_folder',
                        'output' => 'Scan failed: ' . $process->getErrorOutput(),
                        'error' => $process->getErrorOutput()
                    ];
                } else {
                    $results[] = [
                        'file' => 'Folder: uploads_folder',
                        'output' => $process->getOutput(),
                    ];
                }

                $this->cleanupDirectory($tempDir);
            } else {
                foreach ($uploadedFiles as $file) {
                    $tempPath = tempnam(sys_get_temp_dir(), 'upload_');
                    $file->move(dirname($tempPath), basename($tempPath));
                    $filePath = $tempPath;

                    $process = new Process([$pythonCmd, $pythonScriptPath, 'file', $filePath]);
                    $process->setTimeout(120);
                    $process->run();

                    if (!$process->isSuccessful()) {
                        Log::error('Python script failed for file ' . $file->getClientOriginalName() . ': ' . $process->getErrorOutput());
                        $results[] = [
                            'file' => $file->getClientOriginalName(),
                            'output' => 'Scan failed: ' . $process->getErrorOutput(),
                            'error' => $process->getErrorOutput()
                        ];
                    } else {
                        $results[] = [
                            'file' => $file->getClientOriginalName(),
                            'output' => $process->getOutput(),
                        ];
                    }

                    if (file_exists($filePath)) {
                        unlink($filePath);
                    }
                }
            }

            Log::info('Scan results:', $results);

            if (!empty($results)) {
                $this->sendEmailResults($results, $receiptEmail, $emailScriptPath, $pythonCmd);
            }

        } catch (\Exception $e) {
            Log::error('Malware scan failed: ' . $e->getMessage());
            return back()->with('error', 'Something went wrong during the scan: ' . $e->getMessage())
                         ->withInput();
        }

        return view('welcome', [
            'results' => $results,
            'scan_completed' => true
        ])->with('success', 'Scan completed successfully!');
    }

    private function sendEmailResults($results, $receiptEmail, $emailScriptPath, $pythonCmd)
    {
        try {
            $resultsString = "";
            foreach ($results as $result) {
                $resultsString .= "File/Folder: " . $result['file'] . "\nOutput: " . $result['output'] . "\n\n";
            }

            $process = new Process([$pythonCmd, $emailScriptPath, $receiptEmail]);
            $process->setInput($resultsString); // ðŸš€ Safe stdin method
            $process->setTimeout(60);
            $process->run();

            if (!$process->isSuccessful()) {
                Log::warning('Email sending failed: ' . $process->getErrorOutput());
            }
        } catch (\Exception $e) {
            Log::warning('Email sending failed: ' . $e->getMessage());
        }
    }

    private function cleanupDirectory($directory)
    {
        if (is_dir($directory)) {
            $files = glob($directory . '/*');
            foreach ($files as $file) {
                if (is_file($file)) {
                    unlink($file);
                }
            }
            rmdir($directory);
        }
    }

    public function scanIp(Request $request)
    {
        $request->validate([
            'ip_address' => 'required|ip',
        ]);

        $ipAddress = $request->input('ip_address');
        $ipScanScript = base_path('Project/ip_scan.py');
        $pythonCmd = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN'
            ? 'C:\\Python313\\python.exe'
            : 'python3';

        try {
            $process = new Process([$pythonCmd, $ipScanScript, $ipAddress]);
            $process->setTimeout(60);
            $process->run();

            if (!$process->isSuccessful()) {
                throw new ProcessFailedException($process);
            }

            $ipResults = json_decode($process->getOutput(), true);
            Log::info('IP scan results:', ['results' => $ipResults]);

        } catch (\Exception $e) {
            Log::error('IP scan failed: ' . $e->getMessage());
            return back()->with('error', 'IP scanning failed: ' . $e->getMessage());
        }

        return view('welcome', compact('ipResults'));
    }
}
