<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;

class MalwareDetectionController extends Controller
{
    public function welcome()
    {
        return view('welcome');
    }

    public function detectMalware(Request $request)
    {
        try {
            // Enhanced validation with custom messages
            $validator = Validator::make($request->all(), [
                'uploads' => 'required',
                'uploads.*' => 'file|max:102400', // max size 100MB
                'receipt_email' => 'required|email:rfc,dns'
            ], [
                'uploads.required' => 'Please select at least one file to scan.',
                'uploads.*.max' => 'Each file must be smaller than 100MB.',
                'receipt_email.required' => 'Email address is required.',
                'receipt_email.email' => 'Please provide a valid email address.'
            ]);

            if ($validator->fails()) {
                return view('welcome', [
                    'error' => $validator->errors()->first(),
                    'results' => []
                ]);
            }

            $uploadedFiles = $request->file('uploads');
            $receiptEmail = filter_var($request->input('receipt_email'), FILTER_SANITIZE_EMAIL);
            $pythonScriptPath = base_path('Project/scan_file.py');
            $mailscript = base_path('Project/email_alert.py');
            $results = [];
            $uploadType = $request->input('fileOrFolder', 'file');

            // Verify Python scripts exist
            if (!file_exists($pythonScriptPath)) {
                throw new \Exception("Scan script not found: {$pythonScriptPath}");
            }
            if (!file_exists($mailscript)) {
                throw new \Exception("Email script not found: {$mailscript}");
            }

            // Create uploads folder if it doesn't exist
            $uploadsFolderPath = storage_path('app/private/uploads');
            if (!file_exists($uploadsFolderPath)) {
                mkdir($uploadsFolderPath, 0755, true);
            }

            if ($uploadType === 'folder') {
                $results = $this->processFolderUpload($uploadedFiles, $uploadsFolderPath, $pythonScriptPath);
            } else {
                $results = $this->processFileUpload($uploadedFiles, $pythonScriptPath);
            }

            // Send email with results using temporary file
            $this->sendEmailAlert($results, $receiptEmail, $mailscript);

            // Return results to the view
            return view('welcome', [
                'results' => $results,
                'success' => true,
                'message' => 'Scan completed successfully. Results have been sent to your email.'
            ]);

        } catch (\Exception $e) {
            Log::error('Malware detection error: ' . $e->getMessage());
            
            return view('welcome', [
                'error' => 'An error occurred during scanning: ' . $e->getMessage(),
                'results' => []
            ]);
        }
    }

    private function processFolderUpload($uploadedFiles, $uploadsFolderPath, $pythonScriptPath)
    {
        $results = [];
        $folderPath = $uploadsFolderPath . '/uploads_folder_' . time() . '_' . uniqid();
        
        try {
            mkdir($folderPath, 0755, true);

            foreach ($uploadedFiles as $file) {
                $sanitizedName = $this->sanitizeFileName($file->getClientOriginalName());
                $file->move($folderPath, $sanitizedName);
            }

            // Run Python script for folder scanning
            $process = new Process([
                $this->getPythonCommand(), 
                $pythonScriptPath, 
                'folder', 
                $folderPath
            ]);
            $process->setTimeout(300); // 5 minutes timeout
            $process->run();

            if (!$process->isSuccessful()) {
                $error = $process->getErrorOutput();
                Log::error('Python script failed: ' . $error);
                $output = 'Error: ' . $error;
            } else {
                $output = $process->getOutput();
            }

            $results[] = [
                'file' => 'Folder: uploads_folder',
                'output' => $output,
            ];

        } finally {
            // Clean up uploaded folder
            $this->deleteDirectory($folderPath);
        }

        return $results;
    }

    private function processFileUpload($uploadedFiles, $pythonScriptPath)
    {
        $results = [];
        $uploadedPaths = [];

        try {
            foreach ($uploadedFiles as $file) {
                $originalName = $file->getClientOriginalName();
                $sanitizedName = $this->sanitizeFileName($originalName);
                $filePath = $file->storeAs('uploads', $sanitizedName);
                $fullPath = storage_path('app/private/' . $filePath);
                $uploadedPaths[] = $fullPath;

                // Run Python script for file scanning
                $process = new Process([
                    $this->getPythonCommand(), 
                    $pythonScriptPath, 
                    'file', 
                    $fullPath
                ]);
                $process->setTimeout(300); // 5 minutes timeout
                $process->run();

                if (!$process->isSuccessful()) {
                    $error = $process->getErrorOutput();
                    Log::error('Python script failed for file ' . $originalName . ': ' . $error);
                    $output = 'Error scanning file: ' . $error;
                } else {
                    $output = $process->getOutput();
                }

                $results[] = [
                    'file' => $originalName,
                    'output' => $output,
                ];
            }
        } finally {
            // Clean up uploaded files
            foreach ($uploadedPaths as $path) {
                if (file_exists($path)) {
                    unlink($path);
                }
            }
        }

        return $results;
    }

    private function sendEmailAlert($results, $receiptEmail, $mailscript)
    {
        try {
            // Prepare results for email
            $resultsString = "Malware Scan Results:\n\n";
            foreach ($results as $result) {
                $resultsString .= "File/Folder: " . $result['file'] . "\n";
                $resultsString .= "Output: " . $result['output'] . "\n";
                $resultsString .= str_repeat("-", 50) . "\n\n";
            }

            // Write results to temporary file for security
            $tempFile = tempnam(sys_get_temp_dir(), 'scan_results_');
            if ($tempFile === false) {
                throw new \Exception('Failed to create temporary file for email results');
            }

            file_put_contents($tempFile, $resultsString);

            try {
                // Send email alert using temporary file
                $emailProcess = new Process([
                    $this->getPythonCommand(), 
                    $mailscript, 
                    $tempFile, 
                    $receiptEmail
                ]);
                $emailProcess->setTimeout(60); // 1 minute timeout for email
                $emailProcess->run();

                if (!$emailProcess->isSuccessful()) {
                    $error = $emailProcess->getErrorOutput();
                    Log::error('Email sending failed: ' . $error);
                } else {
                    Log::info('Email sent successfully to: ' . $receiptEmail);
                }
            } finally {
                // Clean up temporary file
                if (file_exists($tempFile)) {
                    unlink($tempFile);
                }
            }

        } catch (\Exception $e) {
            Log::error('Email sending error: ' . $e->getMessage());
        }
    }

    private function deleteDirectory($dir)
    {
        if (!file_exists($dir)) {
            return true;
        }

        if (!is_dir($dir)) {
            return unlink($dir);
        }

        foreach (scandir($dir) as $item) {
            if ($item == '.' || $item == '..') {
                continue;
            }

            if (!$this->deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {
                return false;
            }
        }

        return rmdir($dir);
    }

    private function sanitizeFileName($filename)
    {
        // Remove dangerous characters and limit length
        $filename = preg_replace('/[^a-zA-Z0-9._-]/', '_', $filename);
        return substr($filename, 0, 200);
    }

    private function getPythonCommand()
    {
        // Detect OS and return appropriate Python command
        if (PHP_OS_FAMILY === 'Windows') {
            return 'python';
        }
        return 'python3';
    }

    public function scanIp(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'ip_address' => 'required|ip',
            ], [
                'ip_address.required' => 'IP address is required.',
                'ip_address.ip' => 'Please provide a valid IP address.'
            ]);

            if ($validator->fails()) {
                return view('welcome', [
                    'error' => $validator->errors()->first(),
                    'ipResults' => []
                ]);
            }

            $ipAddress = $request->input('ip_address');
            $ipScriptPath = base_path('Project/ip_scan.py');

            if (!file_exists($ipScriptPath)) {
                throw new \Exception("IP scan script not found: {$ipScriptPath}");
            }

            $process = new Process([
                $this->getPythonCommand(), 
                $ipScriptPath, 
                $ipAddress
            ]);
            $process->setTimeout(300); // 5 minutes timeout
            $process->run();

            if (!$process->isSuccessful()) {
                throw new ProcessFailedException($process);
            }

            $ipResults = json_decode($process->getOutput(), true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new \Exception('Invalid JSON response from IP scan script');
            }

            return view('welcome', compact('ipResults'));

        } catch (\Exception $e) {
            Log::error('IP scan error: ' . $e->getMessage());
            
            return view('welcome', [
                'error' => 'An error occurred during IP scanning: ' . $e->getMessage(),
                'ipResults' => []
            ]);
        }
    }
}