<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

class MalwareDetectionController extends Controller
{
    public function welcome()
    {
        return view('welcome');
    }

    public function detectMalware(Request $request)
    {
        $request->validate([
            'uploads' => 'required',
            'uploads.*' => 'file|max:102400', // max size 100MB
            'receipt_email' => 'required|email'
        ]);

        $uploadedFiles = $request->file('uploads');
        $receiptEmail = $request->input('receipt_email');
        $pythonScriptPath = base_path('Project/scan_file.py');
        $mailscript = base_path('Project/email_alert.py');
        $results = [];
        $uploadType = $request->input('fileOrFolder', 'file'); // Default to 'file'

        // Folder for storing uploaded files
        $uploadsFolderPath = storage_path('app/private/uploads');
        if (!file_exists($uploadsFolderPath)) {
            mkdir($uploadsFolderPath, 0755, true);
        }

        if ($uploadType === 'folder') {
            // Folder processing
            $folderPath = $uploadsFolderPath . '/uploads_folder';
            mkdir($folderPath, 0755, true);

            foreach ($uploadedFiles as $file) {
                $file->move($folderPath, $file->getClientOriginalName());
            }

            $process = new Process(['sudo', 'python3', $pythonScriptPath, 'folder', $folderPath]);
            $process->run();

            $results[] = [
                'file' => 'Folder: uploads_folder',
                'output' => $process->getOutput(),
            ];

            // Optional: Clean up uploaded folder
            if (file_exists($folderPath)) {
                array_map('unlink', glob("$folderPath/*.*"));
                rmdir($folderPath);
            }
        } else {
            // File processing
            foreach ($uploadedFiles as $file) {
                $filePath = $file->storeAs('uploads', $file->getClientOriginalName());
                $process = new Process(['sudo', 'python3', $pythonScriptPath, 'file', storage_path('app/private/' . $filePath)]);
                $process->run();

                $results[] = [
                    'file' => $file->getClientOriginalName(),
                    'output' => $process->getOutput(),
                ];

                // Optional: Delete the uploaded file after processing
                if (file_exists(storage_path('app/private/' . $filePath))) {
                    unlink(storage_path('app/private/' . $filePath));
                }
            }
        }

        // Prepare results for email
        $resultsString = "";
        foreach ($results as $result) {
            $resultsString .= "File/Folder: " . $result['file'] . "\n" . "Output: " . $result['output'] . "\n\n";
        }

        // Send email alert
        $emailProcess = new Process(['sudo', 'python3', $mailscript, $resultsString, $receiptEmail]);
        $emailProcess->run();

        // Return results to the view
        return view('welcome', [
            'results' => $results,
        ]);
    }
    public function scanIp(Request $request)
{
    $request->validate([
        'ip_address' => 'required|ip',
    ]);

    $ipAddress = $request->input('ip_address');

    $process = new Process(['python3', base_path('Project/ip_scan.py'), $ipAddress]);
    $process->run();

    if (!$process->isSuccessful()) {
        throw new ProcessFailedException($process);
    }

    $ipResults = json_decode($process->getOutput(), true);

    return view('welcome', compact('ipResults'));
}

}
