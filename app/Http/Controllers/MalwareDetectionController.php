<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class MalwareDetectionController extends Controller
{
    public function welcome()
    {
        return view('welcome');
    }

    public function detectMalware(Request $request)
    {
        $request->validate([
            'uploads' => 'required',
            'uploads.*' => 'file|max:102400', // max size 100MB
            'receipt_email' => 'required|email'
        ]);

        $uploadedFiles = $request->file('uploads');
        $receiptEmail = $request->input('receipt_email');
        $pythonScriptPath = base_path('Project/scan_file.py');
        $mailscript = base_path('Project/email_alert.py');
        $results = [];
        $uploadType = $request->input('fileOrFolder', 'file'); // Default to 'file'

        // Folder for storing uploaded files
        $uploadsFolderPath = storage_path('app/private/uploads');
        if (!file_exists($uploadsFolderPath)) {
            mkdir($uploadsFolderPath, 0755, true);
        }

        if ($uploadType === 'folder') {
            // Folder processing
            $folderPath = $uploadsFolderPath . '/uploads_folder';
            mkdir($folderPath, 0755, true);

            foreach ($uploadedFiles as $file) {
                $file->move($folderPath, $file->getClientOriginalName());
            }

            // Run Python script using exec()
            $command = "sudo python3 " . escapeshellarg($pythonScriptPath) . " folder " . escapeshellarg($folderPath);
            exec($command, $output, $returnVar);

            if ($returnVar !== 0) {
                return back()->withErrors(['error' => 'Error executing Python script: ' . implode("\n", $output)]);
            }

            $results[] = [
                'file' => 'Folder: uploads_folder',
                'output' => implode("\n", $output),
            ];

            // Clean up uploaded folder
            array_map('unlink', glob("$folderPath/*.*"));
            rmdir($folderPath);
        } else {
            // File processing
            foreach ($uploadedFiles as $file) {
                $filePath = $file->storeAs('uploads', $file->getClientOriginalName());

                // Run Python script using exec()
                $command = "sudo python3 " . escapeshellarg($pythonScriptPath) . " file " . escapeshellarg(storage_path('app/private/' . $filePath));
                exec($command, $output, $returnVar);

                if ($returnVar !== 0) {
                    return back()->withErrors(['error' => 'Error executing Python script: ' . implode("\n", $output)]);
                }

                $results[] = [
                    'file' => $file->getClientOriginalName(),
                    'output' => implode("\n", $output),
                ];

                // Delete the uploaded file after processing
                unlink(storage_path('app/private/' . $filePath));
            }
        }

        // Prepare results for email
        $resultsString = "";
        foreach ($results as $result) {
            $resultsString .= "File/Folder: " . $result['file'] . "\n" . "Output: " . $result['output'] . "\n\n";
        }

        // Send email alert using exec()
        $emailCommand = "sudo python3 " . escapeshellarg($mailscript) . " " . escapeshellarg($resultsString) . " " . escapeshellarg($receiptEmail);
        exec($emailCommand, $emailOutput, $emailReturnVar);

        if ($emailReturnVar !== 0) {
            return back()->withErrors(['error' => 'Error sending email: ' . implode("\n", $emailOutput)]);
        }

        // Return results to the view
        return view('welcome', [
            'results' => $results,
        ]);
    }

    public function scanIp(Request $request)
    {
        $request->validate([
            'ip_address' => 'required|ip',
        ]);

        $ipAddress = $request->input('ip_address');
        $pythonScriptPath = base_path('Project/ip_scan.py');

        // Run Python script using exec()
        $command = "python3 " . escapeshellarg($pythonScriptPath) . " " . escapeshellarg($ipAddress);
        exec($command, $output, $returnVar);

        if ($returnVar !== 0) {
            return back()->withErrors(['error' => 'Error executing Python script: ' . implode("\n", $output)]);
        }

        $ipResults = json_decode(implode("\n", $output), true);

        return view('welcome', compact('ipResults'));
    }
}
